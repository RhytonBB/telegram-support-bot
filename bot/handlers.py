from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler

from .db import create_ticket, get_archived_tickets, generate_chat_url


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /support –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    user_id = update.effective_user.id

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
    archived = get_archived_tickets(user_id)

    if archived:
        lines = ["üìÅ *–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:*"]
        for ticket_id, chat_url in archived:
            lines.append(f"‚Ä¢ [–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}]({chat_url})")
        text = "\n".join(lines)
    else:
        text = "_–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π._"

    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


async def create_ticket_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id

    ticket_id = create_ticket(user_id)
    chat_url = generate_chat_url(user_id, ticket_id)

    await query.answer()
    await query.message.reply_text(
        f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id} —Å–æ–∑–¥–∞–Ω–æ.\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:\n{chat_url}"
    )


def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    app.add_handler(CommandHandler("support", support_command))
    app.add_handler(CallbackQueryHandler(create_ticket_callback, pattern="^create_ticket$"))
